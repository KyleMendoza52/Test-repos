class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def insert_at_head(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
        else:
            new_node.next = self.head
            self.head = new_node

    def insert_at_tail(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
        else:
            current = self.head
            while current.next is not None:
                current = current.next
            current.next = new_node

    def delete_at_head(self):
        if self.is_empty():
            print("Linked list is empty.")
        else:
            self.head = self.head.next

    def delete_at_tail(self):
        if self.is_empty():
            print("Linked list is empty.")
        elif self.head.next is None:
            self.head = None
        else:
            current = self.head
            while current.next.next is not None:
                current = current.next
            current.next = None

    def search(self, data):
        if self.is_empty():
            return False
        else:
            current = self.head
            while current is not None:
                if current.data == data:
                    return True
                current = current.next
            return False

    def display(self):
        if self.is_empty():
            print("Linked list is empty.")
        else:
            current = self.head
            while current is not None:
                print(current.data, end=" -> ")
                current = current.next
            print("None")

# Example usage
linked_list = LinkedList()
linked_list.insert_at_head(3)
linked_list.insert_at_head(2)
linked_list.insert_at_head(1)
linked_list.insert_at_tail(4)
linked_list.display()  # Output: 1 -> 2 -> 3 -> 4 -> None
print(linked_list.search(3))  # Output: True
linked_list.delete_at_tail()
linked_list.display()  # Output: 1 -> 2 -> 3 -> None
linked_list.delete_at_head()
linked_list.display()  # Output: 2 -> 3 -> None
